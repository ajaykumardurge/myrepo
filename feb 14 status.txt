1.how do you check the logs in the linux servers ?
syntax: tail -f file.txt
 
i)tail -100f dnf.log
Mon 22 Nov 2021 08:59:34 AM UTC.
[root@ip-172-31-89-89 log]# tail -100f dnf.log
2022-02-14T01:56:56+0000 INFO Metadata cache refreshed recently.
2022-02-14T01:56:56+0000 DDEBUG Cleaning up.
2022-02-14T03:28:06+0000 INFO --- logging initialized ---
2022-02-14T03:28:06+0000 DDEBUG timer: config: 2 ms
2022-02-14T03:28:06+0000 DEBUG Loaded plugins: AmazonID, builddep, changelog, co                                                         nfig-manager, copr, debug, debuginfo-install, download, generate_completion_cach                                                         e, groups-manager, needs-restarting, playground, product-id, repoclosure, repodi                                                         ff, repograph, repomanage, reposync, subscription-manager, uploadprofile
2022-02-14T03:28:06+0000 INFO Updating Subscription Management repositories.
2022-02-14T03:28:06+0000 INFO Unable to read consumer identity
2022-02-14T03:28:06+0000 INFO
This system is not registered to Red Hat Subscription Management. You can use su                                                         bscription-manager to register.

2022-02-14T03:28:06+0000 DEBUG DNF version: 4.4.2
2022-02-14T03:28:06+0000 DDEBUG Command: dnf makecache --timer
2022-02-14T03:28:06+0000 DDEBUG Installroot: /
2022-02-14T03:28:06+0000 DDEBUG Releasever: 8
2022-02-14T03:28:06+0000 DEBUG cachedir: /var/cache/dnf
2022-02-14T03:28:06+0000 DDEBUG Base command: makecache
2022-02-14T03:28:06+0000 DDEBUG Extra commands: ['makecache', '--timer']
2022-02-14T03:28:06+0000 DEBUG Making cache files for all metadata files.

tail -n 50 dnf.log: it will printout the last 50 lines
=====================
2022-02-14T01:56:56+0000 INFO Metadata cache refreshed recently.
2022-02-14T01:56:56+0000 DDEBUG Cleaning up.
2022-02-14T03:28:06+0000 INFO --- logging initialized ---
2022-02-14T03:28:06+0000 DDEBUG timer: config: 2 ms
2022-02-14T03:28:06+0000 DEBUG Loaded plugins: AmazonID, builddep, changelog, config-manager, copr, debug, debuginfo-install, download, generate_completion_cache, groups-manager, needs-restarting, playground, product-id, repoclosure, repodiff, repograph, repomanage, reposync, subscription-manager, uploadprofile
2022-02-14T03:28:06+0000 INFO Updating Subscription Management repositories.
2022-02-14T03:28:06+0000 INFO Unable to read consumer identity

2.Comparing the arthematics operations in shellsscipt
The following arithmetic operators are supported by Bourne Shell.

Assume variable a holds 10 and variable b holds 20 then −

Operator		
"+" operator: 	Adds values on either side of the operator.
syntax:         `expr $a + $b` will give 30

ex: #!/bin/sh

a=10
b=20

addition=`expr $a + $b`
echo "a + b : $addition"


"-" operater:Subtracts right hand operand from left hand operand	
syntax:    `expr $a - $b` will give -10
example:
#!/bin/sh

a=10
b=20

substraction=`expr $a - $b`
echo "a - b : $substraction"

* (Multiplication)	Multiplies values on either side of the operator	
syntax:`expr $a \* $b` will give 200
ex:
=====
#!/bin/sh

a=10
b=20
multiple=`expr $a \* $b`
echo "a * b : $multiple"

/ (Division)	Divides left hand operand by right hand operand	
syntax:`expr $b / $a` will give 2
ex:
=====
#!/bin/sh

a=10
b=20
divide=`expr $b / $a`
echo "b / a : $divide"

% (Modulus)	Divides left hand operand by right hand operand and returns remainder	
syntax: `expr $b % $a` will give 0
ex:
=====
#!/bin/sh

a=10
b=20

val=`expr $b % $a`
echo "b % a : $val"

"==" equals to
#!/bin/sh

a=10
b=20

ex:
=====
#!/bin/sh

a=10
b=20
if [ $a == $b ]
then
   echo "a is equal to b"
fi

if [ $a != $b ]
then
   echo "a is not equal to b"
fi
if [ $a -lt $b ]
then
   echo "a is less than b"
fi
if [ $a -gt $b ]
then
   echo "a is greater than b"
fi


ex:
=====
#!/bin/sh

echo "Enter the first number"
read a
echo "Enter the Second number"
read b
val=`expr $a + $b`
echo "the addition of a + b : $val"

val=`expr $a - $b`
echo "the substraction of a - b : $val"

val=`expr $a \* $b`
echo "multiple of a * b : $val"

val=`expr $b / $a`
echo "division of b / a : $val"

val=`expr $b % $a`
echo "percent of b % a : $val"

if [ $a == $b ]
then
   echo "a is equal to b"
fi

if [ $a != $b ]
then
   echo "a is not equal to b"
fi
if [ $a -lt $b ]
then
   echo "a is less than b"
fi
if [ $a -gt $b ]
then
   echo "a is greater than b"
fi

3. Using the AND Operator

The AND operator allows our program to check if multiple conditions are satisfied at once or not. All parts separated by an AND operator must be true. Otherwise, the statement containing the AND will return false. Check the following bash script example for a better understanding of how AND works.

#!/bin/bash

echo -n "Enter Number:"
read num

if [[ ( $num -lt 10 ) && ( $num%2 -eq 0 ) ]]; then
echo "Even Number"
else
echo "Odd Number"
fi

4.what are the copying methods available in linux from one machine to another(scp ,rcp,rsync)

SCP (secure copy) is a command-line utility that allows you to securely copy files and directories between two locations.

With scp, you can copy a file or directory:

this are the scenario like

   From your local system to a remote system.
   From a remote system to your local system.
   Between two remote systems from your local system.

scp [OPTION] [user@]SRC_HOST:]file1 [user@]DEST_HOST:]file2


scp provides a number of options that control every aspect of its behavior. The most widely used options are:

-P - Specifies the remote host ssh port.
-p - Preserves files modification and access times.
-q - Use this option if you want to suppress the progress meter and non-error messages.
-C - This option forces scp to compresses the data as it is sent to the destination machine.
-r - This option tells scp to copy directories recursively.

1.Copy a Local File to a Remote System with the scp Command

To copy a file from a local to a remote system run the following command:


$scp ajay@172.31.91.142:/home/ec2-user/addition.txt

Where file.txt is the name of the file we want to copy, remote_username is the user on the remote server, 10.10.0.2 is the server IP address. 
The /remote/directory is the path to the directory you want to copy the file to. If you don’t specify a remote directory, 
the file will be copied to the remote user home directory.

If SSH on the remote host is listening on a port other than the default 22 then you can specify the port using the -P argument:

scp -P 2322 file.txt remote_username@10.10.0.2:/remote/directory.


The command to copy a directory is much like as when copying files.
 
The only difference is that you need to use the -r flag for recursive , To copy a directory from a local to remote system, use the -r option

$scp -r /local/directory remote_username@10.10.0.2:/remote/directory


2.Copy a File Between Two Remote Systems using the scp Command.

when using scp you don’t have to log in to one of the servers to transfer files from one to another remote machine.

The following command will copy the file /files/file.txt from the remote host host1.com to the directory /files on the remote host host2.com.

$scp ajay@172.31.91.142:/home/ec2-user/addition.txt user2@host2.com:/files



